<?xml version="1.0" encoding="UTF-8"?>
<html>
	<head>
		<title>
			Tutorial(HTML)
		</title>
		<OUTPUT path="./tutorial.html" remove="" macro="html" />
		<MACRO path="./tutorial.js" remove="" />
		<stylesheet path="tutorial.css" />
		<stylesheet path="samples/svg/sample_graph.css" />
		<stylesheet path="tutorial_tab.css" />
		<script src="scripts/graph_table_svg.js">
		</script>
		<script src="tutorial_script.js">
		</script>
	</head>
	<body>
		<table_of_contents />
		<yarticle title="はじめに">
			<comment>
			GraphTableSVGはSVGで表とグラフ（グラフ理論）を描画するライブラリである。
			このチュートリアルは利用者がHTMLとSVGをある程度理解していることを想定して書いている。
			SVG入門の参考として
			<a href="http://defghi1977.html.xdomain.jp/tech/svgMemo/svgMemo.htm" target="_blank">
				svg要素の基本的な使い方まとめ
			</a>
			を挙げておく。
			このライブラリの
			<a href="./typedoc/globals.html" target="_blank">
				リファレンス
			</a>
			も挙げておくが、説明不足な部分が多いので注意すること。
			ちなみに、中途半端な実装ではあるがこのライブラリで作成した表やグラフはVBAマクロによってPowerpointの図形に変換することが出来る。
			このチュートリアルの各サンプルにはVBAコードと書かれたボタンが設置されているので、Powerpointを利用している方は試してみるとよい。
			詳細は
			<a href="#xarticle-8">
				Table Sample 8 : Powerpointへ出力
			</a>
			に書いてある。
			</comment>

		</yarticle>
		<yarticle title="hello world">
			<tab>
				<page title="code">
					<a href="samples/svg/sample_hello1.html">
						実行結果
					</a>
					<load path="samples/svg/sample_hello1.html" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/sample_hello1.html" id="svgbox" />
				</page>
			</tab>
			<comment>
				最も簡単なHello Worldサンプル。
				GraphTableSVGにはいくつかのカスタムSVG要素が存在し、オブジェクトはSVGのいくつかの要素を格納したG要素である。
				g-rect要素はその内の一つで、text要素とrect要素を格納している。
				g-rect要素はカスタムSVG要素なのでsvg要素内に記述しても何も描画されないが、
				<rhref method="true">
					openSVG
				</rhref>
				関数でSVG要素のidを指定して呼び出すことでSVG要素内のカスタムSVG要素をG要素に変換することが出来る。
			</comment>

			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox21" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox21" />
				</page>
			</tab>
			<comment>
			ライブラリを適用するSVGSVGElement要素のviewboxは要素と同じ幅と高さを持っているか、もしくはg-shrink属性がtrueになっていることを仮定している。
			g-shrink属性はライブラリのカスタム属性でtrueのとき、SVGSVGElement内の要素に合わせてSVGSVGElementが拡大縮小する。
			</comment>

		</yarticle>
		<yarticle title="テキスト">
			<comment>
				オブジェクトに対応する要素の内容にテキストを記述することで、テキストを表示することができる。
			</comment>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox14" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox14" />
					<comment>
						要素の内容のテキストに含まれている改行は無視される。
						二行以上記述したい場合はt要素を利用する。
						テキストはSVGのtext要素に変換され、t要素はtspan要素に変換される。
						よって属性を設定することでテキストに装飾することができる。
						また、t要素のnewline属性にfalseを与えるとそのテキストは改行されない。
					</comment>
				</page>
			</tab>
		</yarticle>
		<yarticle title="オブジェクトの種類">
			<comment>
				g-rect以外にもオブジェクトを作成することが出来る。
			</comment>
			<tab>
				<page title="code">
					<a href="samples/svg/sample_hello2.html">
						実行結果
					</a>
					<load path="samples/svg/sample_hello2.html" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/sample_hello2.html" id="svgbox" />
				</page>
			</tab>
			<comment>
				作成できるオブジェクトと継承関係は以下の通り。
			</comment>
			<tab>
				<page title="表" checked="1">
				
				<!-- <iframe g-src="samples/svg/table1.html" width="1000px" height="1000px"></iframe> -->
				<load path="samples/svg/html_table1.html" id="html_table1" />

				</page>
				<page title="継承">
					<load path="images/extend.png" />
				</page>
			</tab>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox18" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox18" />
				</page>
			</tab>
			<comment>
				g-rectは矩形、g-ellipseは楕円、g-calloutは吹き出し、g-arrow-calloutは矢印付き矩形である。
				g-edgeは線である。
			</comment>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox19" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox19" />
				</page>
			</tab>
			<comment>
				g-tableは行数hかつ列数wの表を作る。
				hはg-table内のrow要素の数で、wは行に含まれているセルの最大数である。
				上から順に表の行とrow要素が対応しており、左から順にrow要素内のセルと表のセルが対応している。
				セル要素の内容のテキストが対応するセルのテキストになる。
			</comment>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox20" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox20" />
				</page>
			</tab>
			<comment>
				g-graphは頂点と辺の集合である。ここでの辺はg-edgeで、頂点はGVertexを継承したオブジェクトである。
				現在のところ、GVertexを継承しているオブジェクトはg-rect, g-ellipse, g-callout, g-arrow-calloutである。
				g-graphの子に頂点と辺のオブジェクトを記述することで、それらを扱う集合となる。
			</comment>
		</yarticle>
		<yarticle title="カスタム属性">
			<comment>
				タグに属性を記述することで生成するオブジェクトの属性を指定することが出来る。
				これをカスタム属性と呼ぶ。
				指定できる属性は以下の通り。
			</comment>
					<load path="samples/svg/html_table2.html" id="html_table2" />

			<comment>
				カスタム属性の例を以下に載せる。
			</comment>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox7" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox7" />
					<comment>
						cx, cy属性を指定することで、要素の中心座標を指定できる。
						またx, y属性を指定することで、要素の左上端の座標を指定できる。
						width, height属性を指定することで、要素のサイズを指定できる。
						surface:style, text:style属性を指定することで図形のスタイルとテキストのスタイルを設定できる。
						同様にsurface:class, text:class属性でそれぞれのクラスを指定することができる。
					</comment>
				</page>
			</tab>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox15" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox15" />
				</page>
			</tab>
			<comment>
				cellにw属性を設定することで指定した数だけ右のセルと結合させることができる。
				同様にw属性を設定することで指定した数だけ下のセルと結合する。
			</comment>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox16" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox16" />
					<comment>
						x1,x2,y1,y2属性を指定することで辺の開始位置と終了位置の座標を設定できる。
						さらにx3, y3属性を指定することで制御点を設定できる。
						また、begin-vertexとend-vertexにGVertexを継承したオブジェクトのidを指定することで
						指定したオブジェクト同士を辺でつなげることができる。
					</comment>
				</page>
			</tab>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox17" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox17" />
					<comment>
						speaker-x, speaker-y属性を指定することで、GCallout要素の吹き出しの開始位置を設定できる。
					</comment>
					<comment>
						direction属性を指定することで、GArrowCallout要素の矢印の向きを指定できる。
						arrow-neck-width,
						arrow-neck-height,
						arrow-head-width,
						arrow-head-height属性を指定することで矢印のサイズの微調整ができる。
					</comment>
				</page>
			</tab>
		</yarticle>
		<yarticle title="カスタムスタイル属性">
			<comment>
				タグのスタイルを記述することで生成するオブジェクトのスタイルを指定することが出来る。
				これをカスタムスタイル属性と呼ぶ。
				指定できるカスタムスタイル属性は以下の通り。
			</comment>
									<load path="samples/svg/html_table3.html" id="html_table3" />

			<comment>
				カスタムスタイル属性の例を以下に載せる。
			</comment>
			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox8" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox8" />
				</page>
			</tab>
			<comment>
						HorizontalAnchorとVerticalAnchorでテキストの配置位置を指定することが出来る。
						paddingとmarginは図形とテキスト間の余白を表す。
						autosize-shape-to-fit-textはtrueにすると、図形のサイズがテキストに合うように自動的に計算される。
			</comment>

			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox9" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox9" />
				</page>
			</tab>
			<comment>
						--begin-connector-typeと--end-connector-typeで辺の接続位置を設定できる。
						ただし、接続位置はPowerpointに準拠しているので、オブジェクトと接続位置の組み合わせによっては直感的な位置に配置されないことに注意する。
						例えば、g-rectとtoprightを組み合わせても右上の角が辺の接続位置になるわけではない。
			</comment>
			<comment>
						--marker-startと--marker-endはそれぞれ辺の開始位置と終了位置の矢印の有無を表す。
			</comment>

			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox10" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox10" />
				</page>
			</tab>
			<comment>
						--stroke-styleで辺もしくは図形の輪郭を点線に変更することが出来る。
			</comment>

			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox11" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox11" />
				</page>

			</tab>
			<comment>
						--path-text-alignmentで辺上のテキストの配置方法を指定できる。
			</comment>

			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox12" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox12" />
				</page>
			</tab>
			<comment>
						g-tableの--widthsと各rowの--heightで各列の横幅と各行の縦幅を設定できる。
						ただしセル内のテキストの幅がそれよりも大きい場合は最大テキスト幅になる。
			</comment>

			<tab>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox22" type="code" />
				</page>
				<page title="svg" checked="1">
					<load path="samples/svg/svg.html" id="svgbox22" />
				</page>
				<page title="code">
					<load path="samples/svg/svg.html" id="svgbox23" type="code" />
				</page>
				<page title="svg">
					<load path="samples/svg/svg.html" id="svgbox23" />
				</page>

			</tab>
			<comment>
			--relocateカスタムスタイル属性でg-graph内の頂点を整列させることができる。
				<rhref module="true" method="true">TreeArrangement.alignVerticeByChildren</rhref>
			を指定すると兄弟頂点が同じ高さになるように整列される。
				<rhref module="true" method="true">TreeArrangement.alignVerticeByLeave</rhref>
			は葉が同じ高さになるように整列される。
			このときの各頂点の水平間隔と垂直間隔は
			--vertex-x-intervalと--vertex-y-intervalカスタムスタイル属性で設定できる。
			</comment>

		</yarticle>
		<yarticle title="マクロと画像出力">
			<comment>
			このライブラリで作成した表やグラフはVBAマクロによってPowerpointの図形に変換することが出来る。
			</comment>
		</yarticle>
	</body>
</html>
