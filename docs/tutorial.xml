<?xml version='1.0' encoding='UTF-8'?>
<html>
<head>
<title>hello</title>
<OUTPUT path="./tutorial.html" remove="" macro="html" />
<MACRO path="./tutorial.js" remove=""/>
<stylesheet path="tutorial.css" />
</head>
<body>

<table_of_contents />
<xarticle title="はじめに" >
GraphTableSVGはSVGで表とグラフ（グラフ理論）を描画するライブラリである。
このチュートリアルは利用者がHTMLとSVGをある程度理解していることを想定して書いている。<dbr/>
SVG入門の参考として
<a href="http://defghi1977.html.xdomain.jp/tech/svgMemo/svgMemo.htm" target="_blank">svg要素の基本的な使い方まとめ</a>を挙げておく。<dbr/>
このライブラリの<a href="./typedoc/globals.html" target="_blank">リファレンス</a>も挙げておくが、説明不足な部分が多いので注意すること。
ちなみに、中途半端な実装ではあるがこのライブラリで作成した表やグラフはVBAマクロによってPowerpointの図形に変換することが出来る。
このチュートリアルの各サンプルにはVBAコードと書かれたボタンが設置されているので、Powerpointを利用している方は試してみるとよい。
詳細は<a href="#xarticle-8">Table Sample 8 : Powerpointへ出力</a>に書いてある。<dbr/>
</xarticle>

<xarticle title="Table Sample 1 : hello world" >
<load path="table/sample_table_hello.js" />
<load path="table/sample_table_hello.html" />
<load path="images/table_hello1.png" />
<a href="table/sample_table_hello.html">実行結果</a><dbr/>
Table（表）を作成する例。
TableはSVGなのでどのSVG要素内に作成するかをConstructorの引数の第一要素で指定する。
第二要素はオプションでTableのSVG要素内の位置や行数列数を指定することができる。
また、前述の通りTableはSVGなので構成要素のプロパティを編集することでTableの中身を編集することができる。<dbr/>
ブラウザのデバッグ機能を用いてTableがSVGでどのように構成されているか見ることも編集することも可能。
<load path="images/table_hello2.png" />
Javascript上ではTableは主にGraphTableSVG.TableとGraphTableSVG.Cellクラスで構成されている。
プロパティやメソッドの詳細は下記のリファレンスから確認できる。
<ol>
<li><a href="./typedoc/classes/graphtablesvg.table.html" target="_blank">Table</a></li>
<li><a href="./typedoc/classes/graphtablesvg.cell.html" target="_blank">Cell</a></li>
</ol>
</xarticle>

<xarticle title="Table Sample 2 : Tableの構成">
<load path="images/table2.png" />
<load path="images/table3.png" />
上の図はTableとCellがどのようなSVG要素で構成されているかを示している。
Cellは背景をSVGRectElementで、テキストをSVGTextElementで表しており、それらをSVGGElementでまとめている。
Tableは各Cellを表すSVGGElementと各枠を表すSVGLineElementをSVGGElementでまとめている。
これらはブラウザのデバッグ機能で確認できる。<dbr/>
参考のために各SVG要素のリファレンスを貼っておく。
<ol>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/SVGLineElement" target="_blank">SVGLineElement</a></li>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/SVGTextElement" target="_blank">SVGTextElement</a></li>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/SVGGElement" target="_blank">SVGGElement</a></li>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/SVGRectElement" target="_blank">SVGRectElement</a></li>
</ol>
<dbr/>
下のコードはSVG要素のプロパティを編集してテーブルの見た目を変更する例である。
SVG要素のスタイル属性を直接編集や、クラス名によるCSSでの設定によって見た目を変更することが出来る。
<a href="table/sample_table_style.html">実行結果</a><dbr/>
<load path="table/sample_table_style.js" />
<load path="table/sample_table_style.css" />
<load path="images/table_style.png" />
</xarticle>

<xarticle title="Table Sample 3 : デフォルトクラス名の指定" >
<load path="table/sample_table_style_select.js" />
<load path="table/sample_table_style_select.css" />
<load path="images/table_select_style.png" />
Tableの各セルや枠にCSSを適用するためには各要素のクラス属性を設定しないといけない。
これは面倒なので、TableのCSSからセルや枠のCSSも設定できるようにカスタム属性を追加している。
--default-cell-classと--default-border-classはそれぞれセルと枠の各クラス属性のデフォルト名を指定する属性である。
これをtable.svgGroupのスタイルに設定しておくことで、一つずつクラス属性を設定する手間が省ける。<dbr/>
同様にcell.svgGroupに--default-background-classと--default-text-classを適用することで
cell.backgroundとcell.svgTextのクラス属性を設定することができる。
また、Tableのコンストラクタの第二引数にあるtableClassNameからtable.svgGroupのクラス属性を設定することができるので、
CSSファイルにこれらのカスタム属性を記述しておくことで、コンストラクタとCSSからTableの見た目を一度に設定することが出来る。
（<a href="table/sample_table_style_select.html">実行結果</a>）
ただし、この方法では各セルごとにCSSを変更するなどの細かな設定はできないことに注意すること。
</xarticle>

<xarticle title="Table Sample 4 : RowとColumn" >
<load path="table/sample_table_width.js" />
<load path="images/table_rowcolumn.png" />
<a href="table/sample_table_width.html">実行結果</a><dbr/>
各行の高さ、各列の幅はRow,Columnのプロパティから設定できる。
RowクラスとColumnクラスの詳細は下のリファレンスを参照すること。
<ol>
<li><a href="./typedoc/classes/graphtablesvg.row.html" target="_blank">Row</a></li>
<li><a href="./typedoc/classes/graphtablesvg.column.html" target="_blank">Column</a></li>
</ol>
</xarticle>

<xarticle title="Table Sample 5 : セルの連結" >
<load path="table/sample_table_merge.js" />
<load path="images/table_merge.png" />
<a href="table/sample_table_merge.html">実行結果</a><dbr/>
隣り合うセルを結合することが出来る。cell.mergeRight()は右のセルと結合、cellmergeBottom()は下のセルと結合する。
cell.merge(w, h)はそのセルを基準として列セル数w、行セル数hの結合セルを作成する。
出来上がるセルは必ず矩形でなければならない。そのような結合セルにならない場合はエラーが発生する。
実際に結合できるかどうかはcell.canMerge(w, h), cell.canMergeRight, cell.canMergeBottomで確認できる。
</xarticle>

<xarticle title="Table Sample 6 : テキスト位置の指定" >
<load path="table/sample_table_anchor.js" />
<load path="table/sample_table_anchor.css" />
<load path="images/table_anchor.png" />
<a href="table/sample_table_anchor.html">実行結果</a><dbr/>
Powerpointの表のようにセル内のテキスト位置を指定できる。
垂直方向のテキストの配置位置はcell.verticalAnchorもしくはcell.svgGroupの--vertical-anchor属性で指定できる。
水平方向のテキストの配置位置はcell.horizontalAnchorもしくはcell.svgGroupの--horizontal-anchor属性で指定できる。
</xarticle>

<xarticle title="Table Sample 7 : Logic Table" >
<load path="table/sample_table_logic.js" />
<load path="images/table_logic.png" />
<a href="table/sample_table_logic.html">実行結果</a><dbr/>
<ahref>LogicTable</ahref>クラスから表を作成することが出来る。
LogicTableクラスはTableクラスから描画関係を取り除いたクラスである。
<ahref>LogicCell</ahref>を二次元配列に格納しており各LogicCellを編集することでセルの編集をすることができる。
よって、Tableクラスを作成する前からどのような表を作るか決まっている場合はLogicTableクラスを通してSVGを構築したほうがコードの見通しがすっきりするかもしれない。
<dbr/>
table.construct(table, option)は文字列の2次元配列tableからSVGを構築する関数である。
表の装飾にこだわらない場合はこっちから作ったほうが良いかもしれない。
</xarticle>


<xarticle title="Table Sample 8 : Powerpointへ出力" >
<load path="table/sample_table_powerpoint.html" />
<load path="table/sample_table_powerpoint.js" />
<load path="images/table_powerpoint1.png" />
<load path="images/table_powerpoint2.png" />
<load path="images/table_powerpoint3.png" />
<a href="table/sample_table_powerpoint.html">実行結果</a><dbr/>
表をVBAのコードに変換し、Powerpointのマクロとして実行することでスライド上に表を作成することが出来る。
GraphTableSVG.SVGToVBA.create(tables)はそのようなVBAのコードを作成する関数であるが、作成された表はSVGの表と完全に一致するわけではないので注意。
あくまで、似たような表を作るだけの関数である。コード変換に対応していないstyle属性が多くあるので、凝った装飾をしているとまず反映されない。<dbr/>
</xarticle>

<xarticle title="Graph Sample 1 : Hello World" >
<load path="graph/sample_graph_hello.html" />
<load path="graph/sample_graph_hello.js" />
<load path="images/graph_hello.png" />
<a href="graph/sample_graph_hello.html">実行結果</a><dbr/>
節が一つだけのグラフのHello World。
表と同じようにコンストラクタにsvg要素を与えてグラフを表すSVGを作成する。このとき指定したsvg要素に空のグラフが作成される。
Vertex.createは節を作成する関数である。作成した節にはSVGTextElementがあるので、節にテキストを入れることが出来る。
重要なクラスと関数のリファレンスを以下に列挙する。ただしEdgeクラス、すなわち辺については次の例で説明する。
<ol>
<li><a href="./typedoc/classes/graphtablesvg.graph.html" target="_blank">Graph</a></li>
<li><a href="./typedoc/classes/graphtablesvg.vertex.html" target="_blank">Vertex</a></li>
<li><a href="./typedoc/classes/graphtablesvg.edge.html" target="_blank">Edge</a></li>
<li><a href="./typedoc/classes/graphtablesvg.vertex.html#create" target="_blank">Vertex.create</a></li>
</ol>
</xarticle>

<xarticle title="Graph Sample 2 : Edge" >
<load path="graph/sample_graph_edge.js" />
<load path="images/graph_edge.png" />
<a href="graph/sample_graph_edge.html">実行結果</a><dbr/>
辺を使って節同士を接続する例。
GraphTableSVG.Edge.createでVertexと同じように辺を作成することができる。第二引数にあるbeginVertexとendVertexで辺が接続する開始節と終了節を指定することが出来る。
ここで指定しない場合、辺を作成してもsvg要素上で描画されないので注意すること。
また、graph.connectで辺の接続先を指定することが出来る。第一引数が開始節、第二引数が接続辺、第三引数が終了節。
辺に沿ってテキストを設定することができる。create時の第二引数で指定するか、edge1.svgTextPath.setTextContent(text)で指定する。
ちなみに、節の形は現在、円か四角形のどちらかを選択できる。第二引数でsurfaceType: "rectangle"とすると四角形、それ以外は円形。
下の図は節や辺を構成しているSVG要素の参考図である。表と同じように直接SVGを編集してスタイルを変更することが可能。
<load path="images/graph1.png" />
<load path="images/graph_edge2.png" />
<a href="graph/sample_graph_edge2.html">実行結果</a>
</xarticle>

<xarticle title="Graph Sample 3 : Vertex and Edge" >
<load path="graph/sample_graph_vertex.js" />
<load path="images/graph_vertex.png" />
<a href="graph/sample_graph_vertex.html">実行結果</a><dbr/>
ベジエ曲線のように辺を曲げることが出来る。edge1.controlPointプロパティに点の配列を与えることで制御点を設定することが出来る。ただし、現在設定できる制御点は一つだけなので注意すること。
edge1.markerEnd = GraphTableSVG.Edge.createMark()とすることで終了節の方向に矢印を設定することができる。
SVGには矢印用のSVG要素があるのでそれをcreateMark()で作成し、markerEndに設定することで辺の先に矢印のSVG要素が設定される。
edge1.markerStartも同様に開始節の方向に矢印を設定できる。
ただし、現在は矢印の細かな設定はできないことに注意すること。<dbr/>
</xarticle>

<xarticle title="Graph Sample 4 : Connector" >
<load path="graph/sample_graph_connector.js" />
<load path="images/graph_connector.png" />
<a href="graph/sample_graph_connector.html">実行結果</a><dbr/>
頂点上の辺の接続位置は選択することが出来る。図形がCircleの場合、真上から45度刻みに8方向選ぶことが出来る。Rectangleの場合は真上から90度刻みに4方向。
Autoを選択した場合、二点の位置関係から計算した最適な位置を自動で選択する。
</xarticle>

<xarticle title="Graph Sample 5 : Class Name" >
<load path="graph/sample_graph_class.js" />
<load path="graph/sample_graph_class.css" />
<load path="images/graph_class.png" />
<a href="graph/sample_graph_class.html">実行結果</a><dbr/>
表の場合と同様に、頂点や辺のsvgGroupに設定したCSSから構成している各種SVG要素のプロパティを設定することが出来る。
</xarticle>

<xarticle title="Graph Sample 5 : 破線とAlignment" >
<load path="graph/sample_graph_dash_style.js" />
<load path="images/graph_dash.png" />
<a href="graph/sample_graph_dash_style.html">実行結果</a><dbr/>
Edgeの線は点線にすることが出来る。svgTextPathのstroke-dasharrayを編集することで実現できるが、本ライブラリで用意されたGraphTableSVG.msoDashStyle.setStyleで点線の種類を選択することが望ましい。
setStyleで設定した点線はPowerpoint側で用意された点線に直接変換できるからである。理由はそれだけなのでPowerpointに出力することを想定していない場合はstroke-dasharrayで十分である。
辺に設定されたテキストの配置位置もpathTextAlignmentプロパティから設定できる。開始頂点側、終了頂点側、辺の中央、そして辺上に均等に配置の四種類を選ぶことが出来る。
何も選ばない場合は中央配置となる。
</xarticle>

<xarticle title="Graph Sample 5 : Tree" >
<load path="graph/sample_graph_tree.js" />
<load path="images/graph_tree_children.png" />
<load path="images/graph_tree_leave.png" />
<a href="graph/sample_graph_tree.html">実行結果</a><dbr/>
現在、graphで描画されているのが木である場合に適用できる各頂点の配置関数がライブラリに用意されている。
<ahref>TreeArrangement.alignVerticeByChildren</ahref>と
<ahref>TreeArrangement.alignVerticeByLeave</ahref>である。
前者は子頂点が同じ高さになるように頂点を配置し、後者は葉頂点が同じ高さになるように配置される。
このときの各頂点の水平間隔と垂直間隔は
<ahref>graph.vertexXInterval</ahref>と
<ahref>graph.vertexYInterval</ahref>で設定できる。<dbr/>
graph.relocateFunctionはグラフの配置方法を決定するアロー関数のプロパティである。
第一引数でgraph自身を受け取る。
配置方法を決定すると言っても、この関数は(1)relocateFunctionの設定時か、(2)appendChild関数を呼ばれた後か、
(3)relocate関数を呼ばれた時か、(4)もしくは後述するconstructFromLogicTreeを呼んだ後にしか呼ばれないので明示的に設定しない限りは呼ばれることはないだろう。
このあたりは設計が煮詰まっていないので今後の実装で変更することもあるかもしれない。
</xarticle>


<xarticle title="Graph Sample 5 : Logic Tree" >
<load path="graph/sample_graph_logictree.js" />
<load path="images/graph_logictree.png" />
<a href="graph/sample_graph_logictree.html">実行結果</a><dbr/>
<ahref>LogicTree</ahref>はLogicTableと同様に、SVG要素を取り除いて木の形や各頂点や辺の設定プロパティだけで構成されたクラスである。
SVG要素として構築する前にあらかじめ木の形が決まっているときはこのクラスを通すと設計がすっきりするかもしれない。
ちなみにLogicGraphはまだ実装されていない。
</xarticle>

<xarticle title="Graph Sample 6 : Powerpoint" >
<ahref>test</ahref>
</xarticle>


</body>
</html>